# 1. Check and process input vote object
if (is.matrix(vote_info)) {
if (all(is.na(vote_info) | vote_info %in% c(0, 1))) {
vote_m <- vote_info
} else if (all(is.logical(vote_info))) {
vote_m <- vote_info
vote_m[vote_m == TRUE] <- 1
vote_m[vote_m == FALSE] <- 0
} else if (all(vote_info %in% c("T", "F", "NA"))) {
vote_m <- vote_info
vote_m[vote_m == "T"] <- 1
vote_m[vote_m == "F"] <- 0
vote_m[vote_m == "NA"] <- NA
} else {
invalid_values <- vote_info[!(is.na(vote_info) | vote_info %in% c(0, 1, TRUE, FALSE, "T", "F", "NA"))]
if (length(invalid_values) > 0) {
stop(paste("Invalid value found in your vote matrix:", paste(invalid_values, collapse = ", ")))
}
}
} else if (is.list(vote_info) && "votes" %in% names(vote_info)) {
vote_m <- vote_info$votes
rownames_old <- rownames(vote_m)
colnames_old <- colnames(vote_m)
yea_values <- vote_info$codes$yea
nay_values <- vote_info$codes$nay
vote_m <- matrix(ifelse(vote_m %in% yea_values, 1,
ifelse(vote_m %in% nay_values, 0, NA)),
nrow = nrow(vote_m), ncol = ncol(vote_m))
rownames(vote_m) <- rownames_old
colnames(vote_m) <- colnames_old
} else {
stop("vote_info is not in a valid type. It has to be a matrix or a rollcall object.")
}
# 2. Positive index
if (length(pos_leg) != 1) {
stop("`pos_leg` should contain exactly one legislator.")
} else {
pos_ind = pos_leg
}
# # output
vote_out = vote_m
total_iter = (control$num_iter - control$start_iter) %/% control$keep_iter
# Initialize parameters from previous run or default
if (!is.null(previous_run)) {
init_info <- init_data_rcpp(
vote_m,
leg_pos_init = tail(previous_run$beta, 1),
alpha_pos_init = cbind(tail(previous_run$alpha1, 1), tail(previous_run$alpha2, 1)),
delta_pos_init = cbind(tail(previous_run$delta1, 1), tail(previous_run$delta2, 1)),
y_star_m_1_init = NULL,
y_star_m_2_init = NULL,
y_star_m_3_init = NULL,
total_iter)
} else {
init_info <- init_data_rcpp(
vote_m, leg_pos_init = NULL, alpha_pos_init = NULL, delta_pos_init = NULL,
y_star_m_1_init = NULL, y_star_m_2_init = NULL, y_star_m_3_init = NULL,
total_iter)
}
# c++
draw_info <- sample_probit_static_rcpp(
vote_m, init_info[[1]], init_info[[2]], init_info[[3]], init_info[[4]],
init_info[[5]], init_info[[6]], init_info[[7]],
init_info[[8]], init_info[[9]], hyperparams$beta_mean, sqrt(hyperparams$beta_var),
hyperparams$alpha_mean, diag(2) * (hyperparams$alpha_scale^2),
hyperparams$delta_mean, diag(2) * (hyperparams$delta_scale^2), 10000000,
control$num_iter, control$start_iter, control$keep_iter, control$flip_rate,
pos_ind - 1, verbose)
all_param_draw = draw_info[[1]]
leg_names <- sapply(rownames(vote_m), function(name) {paste(name, "beta", sep = "_")})
if (is.null(colnames(vote_m))) {
colnames(vote_m) <- sapply(1:ncol(vote_m), function(i) {
paste("vote", i, sep = "_")
})
} # no operation performed
alpha_vote_names_1 <- sapply(colnames(vote_m), function(name) {
paste(name, "alpha", "1", sep = "_")
})
alpha_vote_names_2 <- sapply(colnames(vote_m), function(name) {
paste(name, "alpha", "2", sep = "_")
})
delta_vote_names_1 <- sapply(colnames(vote_m), function(name) {
paste(name, "delta", "1", sep = "_")
})
delta_vote_names_2 <- sapply(colnames(vote_m), function(name) {
paste(name, "delta", "2", sep = "_")
})
colnames(all_param_draw) <-
c(leg_names, alpha_vote_names_1, alpha_vote_names_2, delta_vote_names_1, delta_vote_names_2)
beta_list <- as.data.frame(all_param_draw[, leg_names])
alpha1_list <- as.data.frame(all_param_draw[, alpha_vote_names_1])
alpha2_list <- as.data.frame(all_param_draw[, alpha_vote_names_2])
delta1_list <- as.data.frame(all_param_draw[, delta_vote_names_1])
delta2_list <- as.data.frame(all_param_draw[, delta_vote_names_2])
# Append samples if required
if (!is.null(previous_run) && appended) {
beta_list <- rbind(previous_run$beta, beta_list)
alpha1_list <- rbind(previous_run$alpha1, alpha1_list)
alpha2_list <- rbind(previous_run$alpha2, alpha2_list)
delta1_list <- rbind(previous_run$delta1, delta1_list)
delta2_list <- rbind(previous_run$delta2, delta2_list)
}
return(list(
beta = beta_list,
alpha1 = alpha1_list,
alpha2 = alpha2_list,
delta1 = delta1_list,
delta2 = delta2_list,
votes = vote_info
))
}
#' @title initialize three auxiliary parameters y
init_y_star_m <- function(vote_m) {
y_star_m_1 <- vote_m
y_star_m_2 <- vote_m
y_star_m_3 <- vote_m
y_star_m_1[which(vote_m == 1)] = 0
y_star_m_2[which(vote_m == 1)] = 1
y_star_m_3[which(vote_m == 1)] = 0
no_votes <- which(vote_m == 0)
sample_upper <- rbinom(length(no_votes), size = 1, prob = 0.5)
y_star_m_1[no_votes[which(sample_upper == 1)]] = 0
y_star_m_2[no_votes[which(sample_upper == 1)]] = 0
y_star_m_3[no_votes[which(sample_upper == 1)]] = 1
y_star_m_1[no_votes[which(sample_upper == 0)]] = 1
y_star_m_2[no_votes[which(sample_upper == 0)]] = 0
y_star_m_3[no_votes[which(sample_upper == 0)]] = 0
return(list(y_star_m_1, y_star_m_2, y_star_m_3))
}
#' @title initialize member and position parameters and get starting points
init_data_rcpp <- function(vote_m, leg_pos_init, alpha_pos_init, delta_pos_init,
y_star_m_1_init, y_star_m_2_init, y_star_m_3_init, total_iter) {
if (!is.null(leg_pos_init)) {
leg_pos_m <-
matrix(leg_pos_init, nrow = total_iter, ncol = nrow(vote_m), byrow = T)
} else {
leg_pos_m <- matrix(0, nrow = total_iter, ncol = nrow(vote_m)) # if it is not imputed
}
if (!is.null(alpha_pos_init)) {
alpha_pos_m <-
matrix(t(alpha_pos_init), nrow = total_iter, ncol = 2 * ncol(vote_m), byrow = T) # vector of 2
} else {
alpha_pos_m <-
matrix(c(rep(1, ncol(vote_m)), rep(-1, ncol(vote_m))),
nrow = total_iter, ncol = 2 * ncol(vote_m), byrow = T)
}
if (!is.null(delta_pos_init)) {
delta_pos_m <-
matrix(t(delta_pos_init), nrow = total_iter, ncol = 2 * ncol(vote_m), byrow = T) # vector of 2
} else {
delta_pos_m <-
matrix(0, nrow = total_iter, ncol = 2 * ncol(vote_m), byrow = T)
}
if (!is.null(y_star_m_1_init)) {
y_star_m_1 <- y_star_m_1_init
y_star_m_2 <- y_star_m_2_init
y_star_m_3 <- y_star_m_3_init
} else {
y_star_info <- init_y_star_m(vote_m)
y_star_m_1 <- y_star_info[[1]]
y_star_m_2 <- y_star_info[[2]]
y_star_m_3 <- y_star_info[[3]]
}
all_params_draw <- cbind(leg_pos_m, alpha_pos_m, delta_pos_m) # initial values of beta, alpha, delta
beta_start_ind = 0; # used in C++
alpha_start_ind = nrow(vote_m);
alpha_2_start_ind = alpha_start_ind + ncol(vote_m);
delta_start_ind = alpha_2_start_ind + ncol(vote_m);
delta_2_start_ind = delta_start_ind + ncol(vote_m);
return(list(all_params_draw, y_star_m_1, y_star_m_2,
y_star_m_3, beta_start_ind,
alpha_start_ind, alpha_2_start_ind,
delta_start_ind, delta_2_start_ind))
}
# Run MCMC algorithm to get posterior samples
post_samples_pum = sample_pum_static(h116.c, hyperparams1, control,
pos_leg = grep("SCALISE",
rownames(h116.c$votes)),
verbose = TRUE)
#'   - `delta2`: A matrix of posterior samples for `delta2`.
#'   - `vote_info`: The input vote object.
#' @examples
#' hyperparams <- list(beta_mean = 0, beta_var = 1, alpha_mean = c(0, 0),
#'                     alpha_scale = 5, delta_mean = c(-2, 10), delta_scale = sqrt(10))
#' control <- list(num_iter = 10, start_iter = 0, keep_iter = 1, flip_rate = 0.1)
#' post_samples <- sample_pum_static(h116.c, hyperparams,
#'                                   control, pos_leg = grep("SCALISE", rownames(h116.c$votes)),
#'                                   verbose = FALSE, pre_run = NULL, appended = FALSE)
#' @export
sample_pum_static <- function(vote_info, hyperparams, control,
pos_leg = 0, verbose = FALSE, pre_run = NULL, appended = FALSE) {
# 1. Check and process input vote object
if (is.matrix(vote_info)) {
if (all(is.na(vote_info) | vote_info %in% c(0, 1))) {
vote_m <- vote_info
} else if (all(is.logical(vote_info))) {
vote_m <- vote_info
vote_m[vote_m == TRUE] <- 1
vote_m[vote_m == FALSE] <- 0
} else if (all(vote_info %in% c("T", "F", "NA"))) {
vote_m <- vote_info
vote_m[vote_m == "T"] <- 1
vote_m[vote_m == "F"] <- 0
vote_m[vote_m == "NA"] <- NA
} else {
invalid_values <- vote_info[!(is.na(vote_info) | vote_info %in% c(0, 1, TRUE, FALSE, "T", "F", "NA"))]
if (length(invalid_values) > 0) {
stop(paste("Invalid value found in your vote matrix:", paste(invalid_values, collapse = ", ")))
}
}
} else if (is.list(vote_info) && "votes" %in% names(vote_info)) {
vote_m <- vote_info$votes
rownames_old <- rownames(vote_m)
colnames_old <- colnames(vote_m)
yea_values <- vote_info$codes$yea
nay_values <- vote_info$codes$nay
vote_m <- matrix(ifelse(vote_m %in% yea_values, 1,
ifelse(vote_m %in% nay_values, 0, NA)),
nrow = nrow(vote_m), ncol = ncol(vote_m))
rownames(vote_m) <- rownames_old
colnames(vote_m) <- colnames_old
} else {
stop("vote_info is not in a valid type. It has to be a matrix or a rollcall object.")
}
# 2. Positive index
if (length(pos_leg) != 1) {
stop("`pos_leg` should contain exactly one legislator.")
} else {
pos_ind = pos_leg
}
# # output
vote_out = vote_m
total_iter = (control$num_iter - control$start_iter) %/% control$keep_iter
# Initialize parameters from previous run or default
if (!is.null(pre_run)) {
init_info <- init_data_rcpp(
vote_m,
leg_pos_init = tail(pre_run$beta, 1),
alpha_pos_init = cbind(tail(pre_run$alpha1, 1), tail(pre_run$alpha2, 1)),
delta_pos_init = cbind(tail(pre_run$delta1, 1), tail(pre_run$delta2, 1)),
y_star_m_1_init = NULL,
y_star_m_2_init = NULL,
y_star_m_3_init = NULL,
total_iter)
} else {
init_info <- init_data_rcpp(
vote_m, leg_pos_init = NULL, alpha_pos_init = NULL, delta_pos_init = NULL,
y_star_m_1_init = NULL, y_star_m_2_init = NULL, y_star_m_3_init = NULL,
total_iter)
}
# c++
draw_info <- sample_probit_static_rcpp(
vote_m, init_info[[1]], init_info[[2]], init_info[[3]], init_info[[4]],
init_info[[5]], init_info[[6]], init_info[[7]],
init_info[[8]], init_info[[9]], hyperparams$beta_mean, sqrt(hyperparams$beta_var),
hyperparams$alpha_mean, diag(2) * (hyperparams$alpha_scale^2),
hyperparams$delta_mean, diag(2) * (hyperparams$delta_scale^2), 10000000,
control$num_iter, control$start_iter, control$keep_iter, control$flip_rate,
pos_ind - 1, verbose)
all_param_draw = draw_info[[1]]
leg_names <- sapply(rownames(vote_m), function(name) {paste(name, "beta", sep = "_")})
if (is.null(colnames(vote_m))) {
colnames(vote_m) <- sapply(1:ncol(vote_m), function(i) {
paste("vote", i, sep = "_")
})
} # no operation performed
alpha_vote_names_1 <- sapply(colnames(vote_m), function(name) {
paste(name, "alpha", "1", sep = "_")
})
alpha_vote_names_2 <- sapply(colnames(vote_m), function(name) {
paste(name, "alpha", "2", sep = "_")
})
delta_vote_names_1 <- sapply(colnames(vote_m), function(name) {
paste(name, "delta", "1", sep = "_")
})
delta_vote_names_2 <- sapply(colnames(vote_m), function(name) {
paste(name, "delta", "2", sep = "_")
})
colnames(all_param_draw) <-
c(leg_names, alpha_vote_names_1, alpha_vote_names_2, delta_vote_names_1, delta_vote_names_2)
beta_list <- as.data.frame(all_param_draw[, leg_names])
alpha1_list <- as.data.frame(all_param_draw[, alpha_vote_names_1])
alpha2_list <- as.data.frame(all_param_draw[, alpha_vote_names_2])
delta1_list <- as.data.frame(all_param_draw[, delta_vote_names_1])
delta2_list <- as.data.frame(all_param_draw[, delta_vote_names_2])
# Append samples if required
if (!is.null(pre_run) && appended) {
beta_list <- rbind(pre_run$beta, beta_list)
alpha1_list <- rbind(pre_run$alpha1, alpha1_list)
alpha2_list <- rbind(pre_run$alpha2, alpha2_list)
delta1_list <- rbind(pre_run$delta1, delta1_list)
delta2_list <- rbind(pre_run$delta2, delta2_list)
}
return(list(
beta = beta_list,
alpha1 = alpha1_list,
alpha2 = alpha2_list,
delta1 = delta1_list,
delta2 = delta2_list,
votes = vote_info
))
}
# Run MCMC algorithm to get posterior samples
post_samples_pum = sample_pum_static(h116.c, hyperparams1, control,
pos_leg = grep("SCALISE",
rownames(h116.c$votes)),
verbose = TRUE)
View(post_samples_pum)
document()
document()
document()
library(devtools)
document()
remove.packages("pumBayes")
load("D:/DownLoad/JSS/pumbayesprecomputed_results.Rdata")
View(scotus.pum)
library(devtools)
document()
document()
load("D:/pumBayes/data/h116.rda")
View(h116)
h116[["legis.data"]][["partyCode"]]
load("D:/pumBayes/data/scotus.1937.2021.rda")
View(mqVotes)
str(scotus.1937.2021)
remove.packages("pumBayes")
install_github("SkylarShiHub/pumBayes")
library(devtools)
install_github("SkylarShiHub/pumBayes")
library(pumBayes)
remove.packages("pumBayes")
install_github("SkylarShiHub/pumBayes")
library(pumBayes)
install_github("SkylarShiHub/pumBayes")
library(devtools)
library(devtools)
install_github("SkylarShiHub/pumBayes")
library(pumBayes)
data("h116")
data(h116)
data("scotus.1937.2021")
force(mqTime)
data(scotus.1937.2021)
if (!requireNamespace("pumBayes", quietly = TRUE)) {
devtools::install_github("SkylarShiHub/pumBayes")
}
library(pumBayes)
# Set random seed so that we have reproducible results
set.seed(seed = 1357)
data(h116)
print(h116$votes[1:6,1:6])
print(h116$codes)
print(h116$legis.data[1:6,])
legis.to.remove = grep("TRUMP", rownames(h116$votes))
lop.issue = 0
legis.to.combine = list(grep("AMASH", rownames(h116$votes)),
grep("MITCHELL", rownames(h116$votes)))
legis.to.combine.party = c("I", "I")
lop.leg = 0.6
control = list(leg_rm = legis.to.remove,
combine_leg_index = legis.to.combine,
combine_leg_party = legis.to.combine.party,
lop_leg=lop.leg, lop_issue = lop.issue)
h116.c = preprocess_rollcall(h116, control)
hyperparams = list(beta_mean=0, beta_var=1,
alpha_mean=c(0, 0), alpha_scale=5,
delta_mean=c(-2, 10), delta_scale=sqrt(10))
theta = tune_hyper(hyperparams, n_leg=1000, n_issue=1000)
hist(theta, freq=FALSE, xlab=expression(theta[list(i, j)]),
main="Default prior")
hyperparams.alt = list(beta_mean=0, beta_var=1,
alpha_mean=c(0, 0), alpha_scale=0.1,
delta_mean=c(-40, 0), delta_scale=5)
theta.alt = tune_hyper(hyperparams.alt, n_leg=1000, n_issue=1000)
hist(theta.alt, freq=FALSE, xlab=expression(theta[list(i, j)]),
main="Alternative prior")
setwd("D:/pumBayes")
setwd("D:/DownLoad/JSS_submit")
control = list(num_iter = 400, burn_in = 200, keep_iter = 1,
flip_rate = 0.1)
h116.c.pum = sample_pum_static(h116.c, hyperparams, control,
pos_leg=grep("SCALISE",
rownames(h116.c$votes)),
verbose = TRUE)
View(h116.c.pum)
h116.c.beta.pum.rank = post_rank(h116.c.pum$beta,
c(0.05, 0.5, 0.95))
head(h116.c.beta.pum.rank)
cl = constrain.legis(h116.c, x=list("CLYBURN" = -1, "SCALISE" = 1),
d=1)
require(pscl)
cl = constrain.legis(h116.c, x=list("CLYBURN" = -1, "SCALISE" = 1),
d=1)
h116.c.ideal = ideal(h116.c, d=1, priors=cl, startvals=cl,
maxiter=20000, thin=50, burnin=10000,
store.item=TRUE)
h116.c.beta.ideal.rank = post_rank(h116.c.ideal$x[,,1],
c(0.05, 0.5, 0.95))
partycolors = ifelse(h116.c$legis.data$party=="R", "red",
ifelse(h116.c$legis.data$party=="D",
"blue", "green"))
partysymbols = ifelse(h116.c$legis.data$party=="R", 17,
ifelse(h116.c$legis.data$party=="D", 16, 8))
leg.to.plot = c("OCASIO-CORT (D NY-14)", "TLAIB (D MI-13)",
"PRESSLEY (D MA-7)", "OMAR (D MN-5)")
ind.leg.to.plot = match(leg.to.plot, rownames(h116.c$votes))
plot(h116.c.beta.ideal.rank$`0.5`, h116.c.beta.pum.rank$`0.5`,
xlab="Median Rank order (IDEAL)", ylab="Median Rank Order (PUM)",
col=partycolors, pch=partysymbols, cex.lab = 1)
text(h116.c.beta.ideal.rank$`0.5`[ind.leg.to.plot],
h116.c.beta.pum.rank$`0.5`[ind.leg.to.plot] + 5,
labels = leg.to.plot, pos = c(4, 1, 3, 2), cex = 0.8)
library(wnominate)
h116.c.wnominate = wnominate(h116.c, dims=1,
polarity=grep("SCALISE",
rownames(h116.c$legis.data)))
beta.wnom.rank = rank(h116.c.wnominate[["legislators"]][["coord1D"]])
plot(beta.wnom.rank, h116.c.beta.pum.rank$`0.5`,
xlab="Rank order (WNOMINATE)", ylab="Median Rank Order (PUM)",
col=partycolors, pch=partysymbols, cex.lab=1)
text(beta.wnom.rank[ind.leg.to.plot] + 30,
h116.c.beta.pum.rank$`0.5`[ind.leg.to.plot] + 5,
labels=leg.to.plot, pos=c(4, 1, 3, 2), cex=0.8)
response.curve.pum1 = item_char(vote_num=5, x=c(-4, 2), h116.c.pum)
response.curve.pum2 = item_char(vote_num=9, x=c(-4, 2), h116.c.pum)
response.curve.pum3 = item_char(vote_num=6, x=c(-4, 2), h116.c.pum)
item.list = list(response.curve.pum1, response.curve.pum2,
response.curve.pum3)
vote.num.list = c(5, 9, 6)
par(mfrow=c(1, 3), mai=c(1, 1.1, 1, 1), bty="n")
for (i in seq_along(item.list)) {
data = item.list[[i]]
plot(NA, xlim=range(data$beta_samples),
ylim=range(data$ci_lower, data$ci_upper),
xlab=expression(beta[i]), ylab="Probability of voting 'Yes'",
main=paste0("Vote ", vote.num.list[i]), xaxt="n",
cex.axis=1.8, cex.main=3, cex.lab=2.3)
axis(1, at=c(-4, -2, 0, 2), labels=c(-4, -2, 0, 2), cex.axis=2)
polygon(c(data$beta_samples, rev(data$beta_samples)),
c(data$ci_upper, rev(data$ci_lower)), col="grey80", border=NA)
lines(data$beta_samples, data$means, lwd=1.5, col="black")
}
par(mfrow=c(1, 1))
h116.c.pum.predprob = predict_pum(h116.c, post_samples = h116.c.pum)
h116.c.ideal.predprob = predict_ideal(h116.c, h116.c.ideal)
h116.c.pum.waic = calc_waic(h116.c, prob_array = h116.c.pum.predprob)
h116.c.ideal.waic = calc_waic(h116.c, prob_array = h116.c.ideal.predprob)
h116.c.ideal.waic = calc_waic(h116.c, prob_array = h116.c.ideal.predprob)
data(scotus.1937.2021)
str(mqVotes)
str(mqTime)
mqVotes = array(as.logical(1-mqVotes), dim=dim(mqVotes),
dimnames=list(rownames(mqVotes), colnames(mqVotes)))
print(mqVotes[1:6,1:8])
hyperparams = list(alpha_mean=c(0, 0), alpha_scale=5,
delta_mean=c(-2, 10), delta_scale=sqrt(10),
rho_mean=0.9, rho_sigma=0.04)
control = list(num_iter=600, burn_in=200, keep_iter=2,
flip_rate=0.1, sd_prop_rho=0.1)
sign.refs = list(pos_inds=c(39, 5), neg_inds=c(12, 29),
pos_year_inds=list(1: 31, 1),
neg_year_inds=list(1: 29, 1: 24))
scotus.pum = sample_pum_dynamic(mqVotes, mqTime,
hyperparams, control,
sign.refs, verbose=TRUE)
scotus.beta = scotus.pum$beta
names = c("Hugo Black", "Antonin Scalia", "Warren E. Burger")
terms = list(seq(1937, 1970), seq(1986, 2015), seq(1969, 1985))
labels = c("HLBlack", "AScalia", "WEBurger")
colors = c("blue", "red", "black")
polygon_colors = c("slategray1", "lightpink", "gray")
par(mai=c(1, 1.2, 1, 1))
plot(1937:2015, rep(NA, length(1937:2015)), type="n", xlim=c(1937, 2015),
ylim=c(-8, 5), xlab="Year", ylab=expression(beta[list(i, t)]),
cex.lab=1.5, cex.axis=1.5)
for (i in seq_along(terms)) {
ind = grep(labels[i], colnames(scotus.beta))
postmeans = colMeans(scotus.beta[, ind])
quantiles = apply(scotus.beta[, ind], 2, quantile, c(0.05, 0.975))
polygon(c(terms[[i]], rev(terms[[i]])),
c(quantiles[1, ], rev(quantiles[2, ])),
col=polygon_colors[i], border="NA")
lines(terms[[i]], postmeans, lwd=2, col=colors[i])
}
legend(1980, -2, names, lwd=2, col=colors, bty="n", cex=1.5)
scotus.beta.Black = scotus.beta[,grep("HLBlack",colnames(scotus.beta))]
term_Black = seq(1937,1970)
par(mfrow=c(2, 3), mai=c(1, 1.1, 1, 1))
for(i in 29:34){
hist(scotus.beta.Black[,i], probability=TRUE,
main=paste("Hugo Black, ", term_Black[i]),
ylim=c(0, max(density(scotus.beta.Black[,i])$y)),
xlab=expression(beta[i]),cex.axis=1.8, cex.main=3, cex.lab=2.3)
lines(density(scotus.beta.Black[,i]), col="red", lwd=2)
}
par(mfrow=c(1, 1))
scotus.rho = scotus.pum[["rho"]][["rho"]]
scotus.rho = scotus.pum[["rho"]][["rho"]]
xrange = seq(0.75, 1, length.out=200)
hist(scotus.rho, breaks=25, probability=TRUE, col="skyblue",
border="white", xlim=c(0.75, 1), ylim=c(0,65),
xlab=expression(rho), ylab="Density", main=NULL)
lines(density(scotus.rho, from=0.75, to=1), col="red", lwd=2)
lines(xrange, dtnorm(xrange, mean=0.9, sd=0.04, lower=0, upper=1),
col="black", lwd=2, lty=2)
legend(0.78,25, legend=c("Posterior", "Prior"),
col=c("red", "black"), lty=c(1, 2), lwd=2, bty="n")
box()
scotus.pum.predprob = predict_pum(mqVotes, mqTime, scotus.pum)
scotus.pum.waic = calc_waic(mqVotes, mqTime, scotus.pum.predprob)
library(devtools)
document()
